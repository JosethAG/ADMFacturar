@{
    var consecutivo = ViewData["Consecutivo"] as List<ConsecutivoViewModel>;
    var transportes = ViewData["Transporte"] as List<Transporte>;

}
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Facturación Avanzada</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

</head>
<body class="bg-gray-900 text-white">

    <div class="max-w-7xl mx-auto p-4">

        <!-- Formulario de Encabezado de Factura -->
        <form class="bg-gray-800 p-6 rounded-lg shadow-lg mb-8">
            <h2 class="text-lg font-semibold leading-7 text-white mb-4">Encabezado de Factura</h2>
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                <div>
                    <label for="Consecutivo" class="block text-sm font-medium leading-6 text-white">Consecutivo</label>
                    <input type="text" id="Consecutivo" name="Consecutivo" class="mt-1 block w-full rounded-md bg-gray-700 border-0 py-1.5 text-white focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6" style="padding-left: 10px;" disabled value="@((ViewData["Consecutivo"] as ConsecutivoViewModel)?.Consecutivo)">
                </div>
                <div class="relative">
                    <label for="Cliente" class="block text-sm font-medium leading-6 text-white">Cliente</label>
                    <div class="flex">
                        <input type="text" id="Cliente" name="Cliente" class="mt-1 block w-full rounded-md bg-gray-700 border-0 py-1.5 text-white placeholder-gray-400 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6" style="padding-left: 10px;">
                        <button type="button" class="ml-2 mt-1 text-gray-400 hover:text-white" aria-label="Buscar cliente" onclick="openModalCliente()">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
                <div>
                    <label for="CondicionPago" class="block text-sm font-medium leading-6 text-white">Condición de Pago</label>
                    <select id="CondicionPago" name="CondicionPago" class="mt-1 block w-full rounded-md bg-gray-700 border-0 py-1.5 text-white focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6" style="padding-left: 10px; height: 37px;">
                        <option value="">Seleccionar Forma de Pago</option>
                        <option value="1">Contado</option>
                        <option value="2">Crédito 30 días</option>
                        <option value="3">Crédito 60 días</option>
                        <option value="4">Crédito 90 días</option>
                    </select>
                </div>
                <div>
                    <label for="Transporte" class="block text-sm font-medium leading-6 text-white">Transporte</label>
                    <select id="Transporte" name="Transporte" class="mt-1 block w-full rounded-md bg-gray-700 border-0 py-1.5 text-white focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6" style="padding-left: 10px; height: 37px;">
                        <option value="">Seleccione un transporte</option>
                        @if (transportes != null)
                        {
                            @foreach (var transporte in transportes)
                            {
                                <option value="@transporte.PK_Medio_Transporte">@transporte.Descripcion</option>
                            }
                        }
                    </select>
                </div>
            </div>
        </form>
        <!-- Formulario y Tabla de Productos -->
        <div class="bg-gray-800 p-6 rounded-lg shadow-lg">
            <h3 class="text-xl font-semibold text-white mb-4">Productos</h3>
            <!-- Formulario para ingresar producto -->
            <form id="formProducto" class="mb-4">
                <div class="grid grid-cols-3 gap-4">
                    <div class="relative">
                        <label for="producto" class="block text-sm font-medium leading-6 text-white">Producto</label>
                        <div class="flex">
                            <input type="text" id="producto" name="producto" class="mt-1 block w-full rounded-md bg-gray-700 border-0 py-1.5 text-white placeholder-gray-400 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6" style="padding-left: 10px;" required>
                            <!-- Botón de buscar producto -->
                            <button type="button" class="ml-2 mt-1 text-gray-400 hover:text-white" aria-label="Buscar producto" onclick="openModal()">
                                <i class="fas fa-search"></i>
                            </button>

                        </div>
                    </div>
                    <div>
                        <label for="cantidad" class="block text-sm font-medium leading-6 text-white">Cantidad</label>
                        <input type="number" id="cantidad" name="cantidad" class="mt-1 block w-full rounded-md bg-gray-700 border-0 py-1.5 text-white placeholder-gray-400 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6" style="padding-left: 10px;" required>
                    </div>
                    <div class="flex items-end">
                        <button type="submit" class="bg-green-500 hover:bg-green-600 text-white py-2 px-4 rounded-md">Agregar</button>
                    </div>
                </div>
            </form>
            <!-- Tabla de Productos -->
            <div class="overflow-auto">
                <table class="min-w-full bg-gray-800 text-white">
                    <thead class="bg-gray-900">
                        <tr>
                            <th class="py-3 px-4 text-center">Producto</th>
                            <th class="py-3 px-4 text-center">Cantidad</th>
                            <th class="py-3 px-4 text-center">Precio</th>
                            <th class="py-3 px-4 text-center">Total</th>
                            <th class="py-3 px-4 text-center">Acciones</th>
                        </tr>
                    </thead>
                    <tbody id="tablaProductos" class="text-center">
                        <!-- Aquí se agregarán dinámicamente las filas de productos -->
                    </tbody>
                    @*      <td class="py-2 px-4"><input type="number" value="${precio}" class="bg-gray-700 border-0 text-center w-full text-white" oninput="calcularTotalProducto(this)"></td> *@
                    <tfoot>
                        <tr>
                            <td colspan="2" class="text-right py-2 px-4">Descuento (%)</td>
                            <td class="py-2 px-4">
                                @*  <div class="flex justify-center"> *@
                                <input type="number" id="descuentoPorcentaje" name="descuentoPorcentaje" class="mt-1 block w-16 rounded-md bg-gray-700 border-0 py-1.5 text-white placeholder-gray-400 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6 text-center" maxlength="4">
                                @*   </div> *@
                            </td>
                            <td></td>
                        </tr>
                        <tr>
                            <td colspan="2" class="text-right py-2 px-4">Subtotal</td>
                            <td class="py-2 px-4"><span id="subtotal">0</span></td>
                            <td></td>
                        </tr>
                        <tr>
                            <td colspan="2" class="text-right py-2 px-4">Descuento</td>
                            <td class="py-2 px-4"><span id="descuento">0</span></td>
                            <td></td>
                        </tr>
                        <tr>
                            <td colspan="2" class="text-right py-2 px-4">Total</td>
                            <td class="py-2 px-4"><span id="total">0</span></td>
                            <td></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
        <!-- Botón de Guardar Factura -->
        <div class="flex justify-end mt-4">
            <button id="guardarFactura" class="bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded-md" onclick="guardarFactura()">Guardar Factura</button>
        </div>
        <!-- Botón de Guardar Factura -->
    </div>
    <!-- Modal Buscar Articulo -->
    <div id="modal" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center hidden">
        <div class="bg-gray-800 text-white rounded-lg p-6 w-full max-w-md shadow-xl">
            <div class="mb-6">
                <h3 class="text-xl font-bold mb-4">Buscar Artículo</h3>
                <div class="relative">
                    <input type="text" id="buscarArticulo" class="block w-full rounded-md py-2 px-3 bg-gray-700 text-white placeholder-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder="Buscar por código o descripción">
                </div>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full bg-gray-800 text-white" id="tablaArticulosModal">
                    <thead class="bg-gray-900">
                        <tr>
                            <th class="py-3 px-4 text-center">Código</th>
                            <th class="py-3 px-4 text-center">Descripción</th>
                        </tr>
                    </thead>
                    <tbody class="text-center">
                        <!-- Filas de artículos generadas dinámicamente por JavaScript -->
                    </tbody>
                </table>

            </div>
            <div class="mt-6 flex justify-end">
                <button type="button" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded" onclick="closeModal()">Cerrar</button>
            </div>
        </div>
    </div>
    <!-- Fin Modal Buscar Articulo -->
    <!-- Modal Buscar Cliente -->
    <div id="modalCliente" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center hidden">
        <div class="bg-gray-800 text-white rounded-lg p-6 w-full max-w-md shadow-xl">
            <div class="mb-6">
                <h3 class="text-xl font-bold mb-4">Buscar Cliente</h3>
                <div class="relative">
                    <input type="text" id="buscarCliente" class="block w-full rounded-md py-2 px-3 bg-gray-700 text-white placeholder-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" placeholder="Buscar por código o nombre">
                </div>
            </div>
            <div class="overflow-x-auto">
                <table class="min-w-full bg-gray-800 text-white" id="tablaClientesModal">
                    <thead class="bg-gray-900">
                        <tr>
                            <th class="py-3 px-4 text-center">Código</th>
                            <th class="py-3 px-4 text-center">Nombre</th>
                        </tr>
                    </thead>
                    <tbody class="text-center">
                        <!-- Filas de artículos generadas dinámicamente por JavaScript -->
                    </tbody>
                </table>

            </div>
            <div class="mt-6 flex justify-end">
                <button type="button" class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded" onclick="closeModalCliente()">Cerrar</button>
            </div>
        </div>
    </div>
    <!-- Fin Modal Buscar Cliente -->


    <script>
        // Definir la variable productos como un array global
        let productos = [];

        // Funciones para la modal de artículos
        function openModal() {
            fetch('/Inventario/ListarArticulos')
                .then(response => response.json())
                .then(data => {
                    const buscar = document.getElementById('buscarArticulo').value.toLowerCase();
                    const filteredData = data.filter(articulo =>
                        articulo.pK_Articulo.toLowerCase().includes(buscar) || articulo.descripcion.toLowerCase().includes(buscar)
                    );

                    var tableBody = document.querySelector('#tablaArticulosModal tbody');
                    tableBody.innerHTML = '';

                    filteredData.forEach(articulo => {
                        var row = `
                                <tr class="even:bg-gray-700 hover:bg-gray-600 cursor-pointer" onclick="seleccionarArticulo('${articulo.pK_Articulo}', '${articulo.descripcion}')">
                                    <td class="py-3 px-4 border-b border-gray-700">${articulo.pK_Articulo}</td>
                                    <td class="py-3 px-4 border-b border-gray-700">${articulo.descripcion}</td>
                                </tr>
                            `;
                        tableBody.innerHTML += row;
                    });

                    document.getElementById('modal').classList.remove('hidden');
                })
                .catch(error => {
                    console.error('Error al obtener los artículos:', error);
                });
        }

        function closeModal() {
            document.getElementById('modal').classList.add('hidden');
        }

        function seleccionarArticulo(codigo, descripcion) {
            document.getElementById('producto').value = codigo;
            closeModal();
        }

        document.getElementById('buscarArticulo').addEventListener('input', function () {
            openModal();
        });

        // Funciones para la modal de clientes
        function openModalCliente() {
            fetch('/Clientes/ListarClientes')
                .then(response => response.json())
                .then(data => {
                    const buscar = document.getElementById('buscarCliente').value.toLowerCase();
                    const filteredData = data.filter(cliente =>
                        cliente.pK_Cliente.toLowerCase().includes(buscar) || cliente.nombre.toLowerCase().includes(buscar)
                    );

                    var tableBody = document.querySelector('#tablaClientesModal tbody');
                    tableBody.innerHTML = '';

                    filteredData.forEach(cliente => {
                        var row = `
                                <tr class="even:bg-gray-700 hover:bg-gray-600 cursor-pointer" onclick="seleccionarCliente('${cliente.pK_Cliente}', '${cliente.nombre}', '${cliente.fK_CondicionPago}', '${cliente.fK_Transporte}')">
                                    <td class="py-3 px-4 border-b border-gray-700">${cliente.pK_Cliente}</td>
                                    <td class="py-3 px-4 border-b border-gray-700">${cliente.nombre}</td>                 
                                </tr>
                            `;
                        tableBody.innerHTML += row;
                    });

                    document.getElementById('modalCliente').classList.remove('hidden');
                })
                .catch(error => {
                    console.error('Error al obtener los clientes:', error);
                });
        }

        function closeModalCliente() {
            document.getElementById('modalCliente').classList.add('hidden');
        }

        function seleccionarCliente(codigo, nombre, condicion,transporte) {
            document.getElementById('Cliente').value = codigo;
            document.getElementById('CondicionPago').value = condicion;
            document.getElementById('Transporte').value = transporte;
            closeModalCliente();
        }

        document.getElementById('buscarCliente').addEventListener('input', function () {
            openModalCliente();
        });

        // Manejo del formulario de productos
        const formProducto = document.getElementById('formProducto');
        formProducto.addEventListener('submit', function (event) {
            event.preventDefault();
            const producto = document.getElementById('producto').value.trim();

            if (producto !== '') {
                fetch(`/Facturas/ObtenerProducto?producto=${encodeURIComponent(producto)}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Error al obtener precio y cantidad del producto');
                        }
                        return response.json();
                    })
                    .then(data => {
                        console.log('Producto Data:', data); // Log the received data
                        if (data.cantidad > 0) {
                            const cantidad = parseInt(document.getElementById('cantidad').value.trim(), 10);
                            if (cantidad > 0 && cantidad <= data.cantidad) {
                                productos.push({ producto: data.producto, cantidad, precioUnitario: data.precioUnitario });

                                document.getElementById('producto').value = '';
                                document.getElementById('cantidad').value = '';

                                actualizarTablaProductos();
                            } else {
                                Swal.fire({
                                    title: 'Error',
                                    text: 'La cantidad ingresada supera las existencias disponibles',
                                    icon: 'error',
                                    confirmButtonText: 'Aceptar'
                                });
                            }
                        } else {
                            Swal.fire({
                                title: 'Error',
                                text: 'Producto sin existencias disponibles',
                                icon: 'error',
                                confirmButtonText: 'Aceptar'
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error al obtener precio y cantidad del producto:', error);
                        Swal.fire({
                            title: 'Error',
                            text: 'Error al obtener precio y cantidad del producto',
                            icon: 'error',
                            confirmButtonText: 'Aceptar'
                        });
                    });
            } else {
                Swal.fire({
                    title: 'Error',
                    text: 'Debe seleccionar un producto',
                    icon: 'error',
                    confirmButtonText: 'Aceptar'
                });
            }
        });

        function actualizarTablaProductos() {
            const tablaProductos = document.getElementById('tablaProductos');
            tablaProductos.innerHTML = '';

            let subtotal = 0;
            productos.forEach((prod, index) => {
                const totalProducto = prod.cantidad * prod.precioUnitario;
                const fila = `
                        <tr class="even:bg-gray-700 hover:bg-gray-600">
                            <td class="py-3 px-4 border-b border-gray-700">${prod.producto}</td>
                            <td class="py-3 px-4 border-b border-gray-700">${prod.cantidad}</td>
                            <td class="py-3 px-4 border-b border-gray-700 flex items-center justify-center">
                                <input type="number" class="mt-1 block w-32 rounded-md bg-gray-700 border-0 py-1.5 text-white placeholder-gray-400 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6 text-center" style="padding-left: 10px;" value="${prod.precioUnitario}" onchange="actualizarPrecio(${index}, this.value)">
                            </td>
                            <td class="py-3 px-4 border-b border-gray-700">${totalProducto.toFixed(2)}</td>
                            <td class="py-3 px-4 border-b border-gray-700">
                                <button class="bg-red-500 hover:bg-red-600 text-white py-1 px-3 rounded" onclick="eliminarProducto(${index})">Eliminar</button>
                            </td>
                        </tr>`;
                tablaProductos.innerHTML += fila;
                subtotal += totalProducto;
            });

            const subtotalElement = document.getElementById('subtotal');
            subtotalElement.textContent = subtotal.toFixed(2);

            actualizarDescuentoTotal(); // Actualizar descuento y total cuando se actualiza la tabla de productos
        }

        function actualizarDescuentoTotal() {
            const subtotal = parseFloat(document.getElementById('subtotal').textContent);
            const descuentoPorcentajeElement = document.getElementById('descuentoPorcentaje');
            const descuentoElement = document.getElementById('descuento');
            const totalElement = document.getElementById('total');

            const descuentoPorcentaje = parseFloat(descuentoPorcentajeElement.value) || 0;
            const descuento = (subtotal * descuentoPorcentaje) / 100;
            descuentoElement.textContent = descuento.toFixed(2);
            totalElement.textContent = (subtotal - descuento).toFixed(2);
        }

        window.actualizarPrecio = function (index, nuevoPrecio) {
            productos[index].precioUnitario = parseFloat(nuevoPrecio);
            actualizarTablaProductos();
        };

        window.eliminarProducto = function (index) {
            productos.splice(index, 1);
            actualizarTablaProductos();
        };

        document.getElementById('descuentoPorcentaje').addEventListener('input', function () {
            actualizarDescuentoTotal();
        });

        function guardarFactura() {
            const consecutivo = document.getElementById('Consecutivo').value || '';
            const cliente = document.getElementById('Cliente').value || '';
            const condicionPago = document.getElementById('CondicionPago').value || '';
            const transporte = document.getElementById('Transporte').value || '';

            if (!cliente || !condicionPago || !transporte || productos.length === 0) {
                Swal.fire({
                    title: 'Error',
                    text: 'Debe completar todos los campos y agregar al menos un producto',
                    icon: 'error',
                    confirmButtonText: 'Aceptar'
                });
                return;
            }

            const encabezado = {
                consecutivo: consecutivo,
                cliente: cliente,
                condicionPago: condicionPago,
                transporte: transporte
            };

            const factura = {
                encabezado: encabezado,
                productos: productos.map(prod => ({
                    producto: prod.producto,
                    cantidad: prod.cantidad,
                    precioUnitario: prod.precioUnitario,
                    total: prod.cantidad * prod.precioUnitario
                })),
                subtotal: parseFloat(document.getElementById('subtotal').textContent),
                descuento: parseFloat(document.getElementById('descuento').textContent),
                total: parseFloat(document.getElementById('total').textContent)
            };

            console.log('Factura a enviar:', factura); // Verificar aquí

            fetch('/Facturas/GuardarFactura', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify(factura)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Swal.fire({
                            title: 'Éxito',
                            text: 'Factura guardada con éxito',
                            icon: 'success',
                            confirmButtonText: 'Aceptar'
                        }).then(() => {
                            location.reload(); // Recargar la página para limpiar los campos
                        });
                    } else {
                        Swal.fire({
                            title: 'Error',
                            text: 'Error al guardar la factura',
                            icon: 'error',
                            confirmButtonText: 'Aceptar'
                        });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Error',
                        text: 'Error al guardar la factura',
                        icon: 'error',
                        confirmButtonText: 'Aceptar'
                    });
                });
        }
    </script>

</body>
</html>
