@using ADM.Models
@model Cliente


@{
	var clientes = ViewData["Clientes"] as List<Cliente>;
	var provincias = ViewData["Provincias"] as List<Provincia>;
	var cantones = ViewData["Cantones"] as List<Canton>;
	var distritos = ViewData["Distritos"] as List<Distrito>;
}
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Ingreso de Clientes</title>
</head>
<body>

	<div class="w-full">
	</div>

	<!-- Formulario -->
	<form>
		<div class="bg-gray-800 text-white p-5 rounded-lg shadow-lg">
			<h2 class="text-lg font-bold mb-4">Filtro de clientes</h2>
			<div class="grid grid-cols-1 gap-4 sm:grid-cols-6">
				<div class="sm:col-span-1">
					<label for="nombre_cliente" class="block text-sm font-medium leading-6 text-white">Nombre de Cliente</label>
					<div class="mt-1">
						<input type="text" id="nombre_cliente" name="nombre_cliente" class="block w-full rounded-md bg-gray-700 border-0 py-1.5 text-white focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
					</div>
				</div>
			</div>
		</div>
	</form>
	<!-- Fin del Formulario -->
	<div class="w-full mt-8 bg-gray-800 p-6 rounded-lg shadow-lg">
		<div class="flex justify-between items-center bg-gray-800 text-white p-4 rounded-t-lg">
			<h3 class="text-xl font-semibold"><i class="fas fa-list mr-3"></i> Listado de Clientes</h3>
			<div>
				<button id="btnCreateCliente" class="btn bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded">Crear Cliente</button>
			</div>
		</div>
		<!-- Tabla -->
		<div class="overflow-auto mt-4">
			<table id="tablaClientes" class="min-w-full bg-gray-800 text-white">
				<thead class="bg-gray-900">
					<tr>
						<th class="py-3 px-4 text-center">Código</th>
						<th class="py-3 px-4 text-center">Tipo Identificación</th>
						<th class="py-3 px-4 text-center">Nº Identificación</th>
						<th class="py-3 px-4 text-center">Nombre</th>
						<th class="py-3 px-4 text-center">Teléfono</th>
						<th class="py-3 px-4 text-center">Correo</th>
						<th class="py-3 px-4 text-center">Estado</th>
						<th class="py-3 px-4 text-center">Acciones</th>
					</tr>
				</thead>
				<tbody id="bodyTablaClientes" class="text-center">
					@if (clientes != null)
					{
						@foreach (var cliente in clientes)
						{
							<tr class="even:bg-gray-700 hover:bg-gray-600">
								<td class="py-3 px-4 border-b border-gray-700">@Html.DisplayFor(modelItem => cliente.PK_Cliente)</td>
								<td class="py-3 px-4 border-b border-gray-700">
									@if (cliente.TipoIdentificacion.Equals("1") || cliente.TipoIdentificacion.Equals("Física"))
									{
										<span>Física</span>
									}
									else
									{
										<span>Jurídica</span>
									}
								</td>
								<td class="py-3 px-4 border-b border-gray-700">@Html.DisplayFor(modelItem => cliente.Identificacion)</td>
								<td class="py-3 px-4 border-b border-gray-700">@Html.DisplayFor(modelItem => cliente.Nombre)</td>
								<td class="py-3 px-4 border-b border-gray-700">@Html.DisplayFor(modelItem => cliente.Telefono)</td>
								<td class="py-3 px-4 border-b border-gray-700">@Html.DisplayFor(modelItem => cliente.Correo)</td>
								<td class="py-3 px-4 border-b border-gray-700">
									@if (cliente.Estado)
									{
										<span class="bg-green-200 text-green-600 py-1 px-3 rounded-full text-xs">Activo</span>
									}
									else
									{
										<span class="bg-red-200 text-red-600 py-1 px-3 rounded-full text-xs">Inactivo</span>
									}
								</td>
								@* <td class="p-3 border border-gray-300"> *@
								<td>
									<div class="flex justify-center space-x-2">

										<a onclick="ParsActuCliente('@cliente.PK_Cliente')" class="bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600" title="Editar">
											<i class="fa-solid fa-edit"></i>
										</a>

										<form method="post" asp-action="DesactivarCliente" class="desactivar-form">
											<input type="hidden" name="PK_Cliente" value="@cliente.PK_Cliente">
											<button type="submit" class="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600" title="Desactivar">
												<i class="fa-solid fa-ban"></i>
											</button>
										</form>
									</div>
								</td>
							</tr>
						}
					}
					else
					{
						<tr>
							<td colspan="14">No hay datos disponibles.</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>


	<!--                  Modal de Crear Template                        -->
	<div id="modalCrearCliente" class="modal">
		<div class="modal-content">
			<div id="contentCrearCliente">
			</div>
		</div>
	</div>
	<!--                  Final Modal de Crear Tempalte                        -->

	<!--                  Modal de Actualizar Template                        -->
	<div id="modalActuCliente" class="modal">
		<div class="modal-content">
			<div id="contentActuCliente">
			</div>
		</div>
	</div>
	<!--                  Final Modal de Actualizar Tempalte                        -->

	<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
	<script>
		// Función para filtrar la tabla de clientes por nombre
		function filtrarTabla() {
			// Obtener el valor del nombre de cliente
			const clientName = document.getElementById('nombre_cliente').value.toLowerCase();

			// Obtener todas las filas de la tabla
			const filas = document.querySelectorAll('#bodyTablaClientes tr');

			filas.forEach(fila => {
				const cells = fila.getElementsByTagName('td');
				const matchClientName = clientName === '' || cells[3].textContent.toLowerCase().includes(clientName);

				if (matchClientName) {
					fila.style.display = '';
				} else {
					fila.style.display = 'none';
				}
			});
		}

		// Llamar a la función de filtrado al cargar la página y al cambiar el nombre del cliente
		document.addEventListener('DOMContentLoaded', function () {
			filtrarTabla(); // Filtrar inicialmente al cargar la página
			document.getElementById('nombre_cliente').addEventListener('input', filtrarTabla); // Filtrar al cambiar el nombre
		});

		/*funcion para abrir modal Crear AJAX para cargar la vista parcial*/
		$(document).ready(function () {
			$("#btnCreateCliente").click(function () {
				$("#contentCrearCliente").load("/Clientes/_CrearCliente", function () {
					abrirModal("modalCrearCliente");
				});
			});
		});

		function ParsActuCliente(id) {
			$("#contentActuCliente").load(`/Clientes/_ActualizarCliente?id=${id}`, function () {
				abrirModal("modalActuCliente");
			});
		};

		// <!-- Inicio Validación botón desactivar -->
		document.querySelectorAll('.desactivar-form').forEach(function (form) {
			form.addEventListener('submit', function (event) {
				event.preventDefault(); // Detener el envío normal del formulario

				// Obtener la PK del Cliente desde el formulario
				var pkCliente = this.querySelector('input[name="PK_Cliente"]').value;

				// Mostrar mensaje de confirmación con SweetAlert2
				Swal.fire({
					title: '¿Está seguro?',
					text: "¿Desea desactivar este Cliente?",
					icon: 'warning',
					showCancelButton: true,
					confirmButtonColor: '#3085d6',
					cancelButtonColor: '#d33',
					confirmButtonText: 'Sí, desactivar',
					cancelButtonText: 'Cancelar'
				}).then((result) => {
					if (result.isConfirmed) {
						// Enviar la solicitud para desactivar el cliente
						fetch(`/Clientes/DesactivarCliente?PK=${pkCliente}`, {
							method: 'POST'
						})
							.then(response => {
								if (response.ok) {
									// Mostrar mensaje de éxito con SweetAlert2
									Swal.fire({
										icon: 'success',
										title: 'Cliente desactivado correctamente',
										showConfirmButton: true,
										confirmButtonColor: '#3085d6',
										confirmButtonText: 'OK'
									}).then((result) => {
										// Recargar la página después de desactivar
										location.reload();
									});
								} else {
									throw new Error('Error al desactivar el Cliente');
								}
							})
							.catch(error => {
								// Mostrar mensaje de error con SweetAlert2
								Swal.fire({
									icon: 'error',
									title: 'Error',
									text: error.message,
									confirmButtonColor: '#3085d6',
									cancelButtonColor: '#d33',
									confirmButtonText: 'OK'
								});
							});
					}
				});
			});
		});
		// <!-- Fin Validación botón desactivar -->
		

		$(document).ready(function () {
			$('#tablaClientes').DataTable({
				"paging": true, // Habilita la paginación
				"pagingType": "simple_numbers", // Tipo de paginación
				"lengthMenu": [[10, 25, 50, -1], [10, 25, 50, "Todos"]], // Opciones de cantidad de registros por página
				"searching": false, // Deshabilita la caja de búsqueda
				"language": {
					"lengthMenu": " Mostrar _MENU_ registros por página",
					"zeroRecords": "No se encontraron resultados",
					"info": " Mostrando página _PAGE_ de _PAGES_",
					"infoEmpty": "No hay registros disponibles",
					"infoFiltered": "(filtrado de _MAX_ registros totales)",
					"paginate": {
						"first": "Primero",
						"last": "Último",
						"next": "Siguiente",
						"previous": "Anterior"
					}
				}
			});
		});

	</script>

	<style>


		#tablaClientes tbody td {
			border-bottom: none;
		}

		/* Cambia el color del texto de la paginación a blanco */
		.dataTables_wrapper .dataTables_paginate .paginate_button,
		.dataTables_wrapper .dataTables_info,
		.dataTables_wrapper .dataTables_length select {
			color: white !important;
		}

			/* Cambia el color al pasar el ratón por encima */
			.dataTables_wrapper .dataTables_paginate .paginate_button:hover {
				color: #ddd !important;
			}

			/* Cambia el color de fondo y el color del texto para el botón de la página actual */
			.dataTables_wrapper .dataTables_paginate .paginate_button.current {
				background-color: #333 !important;
				color: white !important;
			}
	</style>
</body>
</html>